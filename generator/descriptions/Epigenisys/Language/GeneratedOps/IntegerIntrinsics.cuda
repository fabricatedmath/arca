__device__ ​ unsigned int __brev ( unsigned int  x )
    Reverse the bit order of a 32 bit unsigned integer. 
__device__ ​ unsigned long long int __brevll ( unsigned long long int x )
    Reverse the bit order of a 64 bit unsigned integer. 
__device__ ​ unsigned int __byte_perm ( unsigned int  x, unsigned int  y, unsigned int  s )
    Return selected bytes from two 32 bit unsigned integers. 
__device__ ​ int __clz ( int  x )
    Return the number of consecutive high-order zero bits in a 32 bit integer. 
__device__ ​ int __clzll ( long long int x )
    Count the number of consecutive high-order zero bits in a 64 bit integer. 
__device__ ​ int __ffs ( int  x )
    Find the position of the least significant bit set to 1 in a 32 bit integer. 
__device__ ​ int __ffsll ( long long int x )
    Find the position of the least significant bit set to 1 in a 64 bit integer. 
__device__ ​ unsigned int __funnelshift_l ( unsigned int  lo, unsigned int  hi, unsigned int  shift )
    Concatenate hi : lo, shift left by shift & 31 bits, return the most significant 32 bits. 
__device__ ​ unsigned int __funnelshift_lc ( unsigned int  lo, unsigned int  hi, unsigned int  shift )
    Concatenate hi : lo, shift left by min(shift, 32) bits, return the most significant 32 bits. 
__device__ ​ unsigned int __funnelshift_r ( unsigned int  lo, unsigned int  hi, unsigned int  shift )
    Concatenate hi : lo, shift right by shift & 31 bits, return the least significant 32 bits. 
__device__ ​ unsigned int __funnelshift_rc ( unsigned int  lo, unsigned int  hi, unsigned int  shift )
    Concatenate hi : lo, shift right by min(shift, 32) bits, return the least significant 32 bits. 
__device__ ​ int __hadd ( int , int )
    Compute average of signed input arguments, avoiding overflow in the intermediate sum. 
__device__ ​ int __mul24 ( int  x, int  y )
    Calculate the least significant 32 bits of the product of the least significant 24 bits of two integers. 
__device__ ​ long long int __mul64hi ( long long int x, long long int y )
    Calculate the most significant 64 bits of the product of the two 64 bit integers. 
__device__ ​ int __mulhi ( int  x, int  y )
    Calculate the most significant 32 bits of the product of the two 32 bit integers. 
__device__ ​ int __popc ( unsigned int  x )
    Count the number of bits that are set to 1 in a 32 bit integer. 
__device__ ​ int __popcll ( unsigned long long int x )
    Count the number of bits that are set to 1 in a 64 bit integer. 
__device__ ​ int __rhadd ( int , int )
    Compute rounded average of signed input arguments, avoiding overflow in the intermediate sum. 
__device__ ​ unsigned int __sad ( int  x, int  y, unsigned int  z )
    Calculate | x − y | + z , the sum of absolute difference. 
__device__ ​ unsigned int __uhadd ( unsigned int, unsigned int )
    Compute average of unsigned input arguments, avoiding overflow in the intermediate sum. 
__device__ ​ unsigned int __umul24 ( unsigned int  x, unsigned int  y )
    Calculate the least significant 32 bits of the product of the least significant 24 bits of two unsigned integers. 
__device__ ​ unsigned long long int __umul64hi ( unsigned long long int x, unsigned long long int y )
    Calculate the most significant 64 bits of the product of the two 64 unsigned bit integers. 
__device__ ​ unsigned int __umulhi ( unsigned int  x, unsigned int  y )
    Calculate the most significant 32 bits of the product of the two 32 bit unsigned integers. 
__device__ ​ unsigned int __urhadd ( unsigned int, unsigned int )
    Compute rounded average of unsigned input arguments, avoiding overflow in the intermediate sum. 
__device__ ​ unsigned int __usad ( unsigned int  x, unsigned int  y, unsigned int  z )
    Calculate | x − y | + z , the sum of absolute difference. 
